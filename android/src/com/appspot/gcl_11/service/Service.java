/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://code.google.com/p/google-apis-client-generator/
 * (build: 2014-04-15 19:10:39 UTC)
 * on 2014-05-02 at 00:44:16 UTC 
 * Modify at your own risk.
 */

package com.appspot.gcl_11.service;

/**
 * Service definition for Service (v0).
 *
 * <p>
 * API
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link ServiceRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class Service extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 15,
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.15 of google-api-client to run version " +
        "1.18.0-rc of the service library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://gcl-11.appspot.com/_ah/api/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "service/v0/";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public Service(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  Service(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * An accessor for creating requests from the Datastore collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Service service = new Service(...);}
   *   {@code Service.Datastore.List request = service.datastore().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Datastore datastore() {
    return new Datastore();
  }

  /**
   * The "datastore" collection of methods.
   */
  public class Datastore {

    /**
     * List.
     *
     * Create a request for the method "datastore.list".
     *
     * This request holds the parameters needed by the service server.  After setting any optional
     * parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @param content the {@link com.appspot.gcl_11.service.model.Entity}
     * @return the request
     */
    public List list(com.appspot.gcl_11.service.model.Entity content) throws java.io.IOException {
      List result = new List(content);
      initialize(result);
      return result;
    }

    public class List extends ServiceRequest<com.appspot.gcl_11.service.model.Entity> {

      private static final String REST_PATH = "datastore/list";

      /**
       * List.
       *
       * Create a request for the method "datastore.list".
       *
       * This request holds the parameters needed by the the service server.  After setting any optional
       * parameters, call the {@link List#execute()} method to invoke the remote operation. <p> {@link
       * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param content the {@link com.appspot.gcl_11.service.model.Entity}
       * @since 1.13
       */
      protected List(com.appspot.gcl_11.service.model.Entity content) {
        super(Service.this, "POST", REST_PATH, content, com.appspot.gcl_11.service.model.Entity.class);
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUserIp(java.lang.String userIp) {
        return (List) super.setUserIp(userIp);
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }
    /**
     * Submit.
     *
     * Create a request for the method "datastore.submit".
     *
     * This request holds the parameters needed by the service server.  After setting any optional
     * parameters, call the {@link Submit#execute()} method to invoke the remote operation.
     *
     * @param content the {@link com.appspot.gcl_11.service.model.Entity}
     * @return the request
     */
    public Submit submit(com.appspot.gcl_11.service.model.Entity content) throws java.io.IOException {
      Submit result = new Submit(content);
      initialize(result);
      return result;
    }

    public class Submit extends ServiceRequest<com.appspot.gcl_11.service.model.Entity> {

      private static final String REST_PATH = "datastore/submit";

      /**
       * Submit.
       *
       * Create a request for the method "datastore.submit".
       *
       * This request holds the parameters needed by the the service server.  After setting any optional
       * parameters, call the {@link Submit#execute()} method to invoke the remote operation. <p> {@link
       * Submit#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param content the {@link com.appspot.gcl_11.service.model.Entity}
       * @since 1.13
       */
      protected Submit(com.appspot.gcl_11.service.model.Entity content) {
        super(Service.this, "POST", REST_PATH, content, com.appspot.gcl_11.service.model.Entity.class);
      }

      @Override
      public Submit setAlt(java.lang.String alt) {
        return (Submit) super.setAlt(alt);
      }

      @Override
      public Submit setFields(java.lang.String fields) {
        return (Submit) super.setFields(fields);
      }

      @Override
      public Submit setKey(java.lang.String key) {
        return (Submit) super.setKey(key);
      }

      @Override
      public Submit setOauthToken(java.lang.String oauthToken) {
        return (Submit) super.setOauthToken(oauthToken);
      }

      @Override
      public Submit setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Submit) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Submit setQuotaUser(java.lang.String quotaUser) {
        return (Submit) super.setQuotaUser(quotaUser);
      }

      @Override
      public Submit setUserIp(java.lang.String userIp) {
        return (Submit) super.setUserIp(userIp);
      }

      @Override
      public Submit set(String parameterName, Object value) {
        return (Submit) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Facebook collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Service service = new Service(...);}
   *   {@code Service.Facebook.List request = service.facebook().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Facebook facebook() {
    return new Facebook();
  }

  /**
   * The "facebook" collection of methods.
   */
  public class Facebook {

    /**
     * Oauth callback.
     *
     * Create a request for the method "facebook.callback".
     *
     * This request holds the parameters needed by the service server.  After setting any optional
     * parameters, call the {@link Callback#execute()} method to invoke the remote operation.
     *
     * @param content the {@link com.appspot.gcl_11.service.model.Token}
     * @return the request
     */
    public Callback callback(com.appspot.gcl_11.service.model.Token content) throws java.io.IOException {
      Callback result = new Callback(content);
      initialize(result);
      return result;
    }

    public class Callback extends ServiceRequest<com.appspot.gcl_11.service.model.Token> {

      private static final String REST_PATH = "facebook/callback";

      /**
       * Oauth callback.
       *
       * Create a request for the method "facebook.callback".
       *
       * This request holds the parameters needed by the the service server.  After setting any optional
       * parameters, call the {@link Callback#execute()} method to invoke the remote operation. <p>
       * {@link
       * Callback#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param content the {@link com.appspot.gcl_11.service.model.Token}
       * @since 1.13
       */
      protected Callback(com.appspot.gcl_11.service.model.Token content) {
        super(Service.this, "POST", REST_PATH, content, com.appspot.gcl_11.service.model.Token.class);
      }

      @Override
      public Callback setAlt(java.lang.String alt) {
        return (Callback) super.setAlt(alt);
      }

      @Override
      public Callback setFields(java.lang.String fields) {
        return (Callback) super.setFields(fields);
      }

      @Override
      public Callback setKey(java.lang.String key) {
        return (Callback) super.setKey(key);
      }

      @Override
      public Callback setOauthToken(java.lang.String oauthToken) {
        return (Callback) super.setOauthToken(oauthToken);
      }

      @Override
      public Callback setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Callback) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Callback setQuotaUser(java.lang.String quotaUser) {
        return (Callback) super.setQuotaUser(quotaUser);
      }

      @Override
      public Callback setUserIp(java.lang.String userIp) {
        return (Callback) super.setUserIp(userIp);
      }

      @Override
      public Callback set(String parameterName, Object value) {
        return (Callback) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Google collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Service service = new Service(...);}
   *   {@code Service.Google.List request = service.google().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Google google() {
    return new Google();
  }

  /**
   * The "google" collection of methods.
   */
  public class Google {

    /**
     * Oauth callback.
     *
     * Create a request for the method "google.callback".
     *
     * This request holds the parameters needed by the service server.  After setting any optional
     * parameters, call the {@link Callback#execute()} method to invoke the remote operation.
     *
     * @param content the {@link com.appspot.gcl_11.service.model.Message}
     * @return the request
     */
    public Callback callback(com.appspot.gcl_11.service.model.Message content) throws java.io.IOException {
      Callback result = new Callback(content);
      initialize(result);
      return result;
    }

    public class Callback extends ServiceRequest<com.appspot.gcl_11.service.model.Message> {

      private static final String REST_PATH = "google/callback";

      /**
       * Oauth callback.
       *
       * Create a request for the method "google.callback".
       *
       * This request holds the parameters needed by the the service server.  After setting any optional
       * parameters, call the {@link Callback#execute()} method to invoke the remote operation. <p>
       * {@link
       * Callback#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param content the {@link com.appspot.gcl_11.service.model.Message}
       * @since 1.13
       */
      protected Callback(com.appspot.gcl_11.service.model.Message content) {
        super(Service.this, "POST", REST_PATH, content, com.appspot.gcl_11.service.model.Message.class);
      }

      @Override
      public Callback setAlt(java.lang.String alt) {
        return (Callback) super.setAlt(alt);
      }

      @Override
      public Callback setFields(java.lang.String fields) {
        return (Callback) super.setFields(fields);
      }

      @Override
      public Callback setKey(java.lang.String key) {
        return (Callback) super.setKey(key);
      }

      @Override
      public Callback setOauthToken(java.lang.String oauthToken) {
        return (Callback) super.setOauthToken(oauthToken);
      }

      @Override
      public Callback setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Callback) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Callback setQuotaUser(java.lang.String quotaUser) {
        return (Callback) super.setQuotaUser(quotaUser);
      }

      @Override
      public Callback setUserIp(java.lang.String userIp) {
        return (Callback) super.setUserIp(userIp);
      }

      @Override
      public Callback set(String parameterName, Object value) {
        return (Callback) super.set(parameterName, value);
      }
    }
    /**
     * Oauth revoke.
     *
     * Create a request for the method "google.revoke".
     *
     * This request holds the parameters needed by the service server.  After setting any optional
     * parameters, call the {@link Revoke#execute()} method to invoke the remote operation.
     *
     * @param content the {@link com.appspot.gcl_11.service.model.Message}
     * @return the request
     */
    public Revoke revoke(com.appspot.gcl_11.service.model.Message content) throws java.io.IOException {
      Revoke result = new Revoke(content);
      initialize(result);
      return result;
    }

    public class Revoke extends ServiceRequest<com.appspot.gcl_11.service.model.Message> {

      private static final String REST_PATH = "google/revoke";

      /**
       * Oauth revoke.
       *
       * Create a request for the method "google.revoke".
       *
       * This request holds the parameters needed by the the service server.  After setting any optional
       * parameters, call the {@link Revoke#execute()} method to invoke the remote operation. <p> {@link
       * Revoke#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param content the {@link com.appspot.gcl_11.service.model.Message}
       * @since 1.13
       */
      protected Revoke(com.appspot.gcl_11.service.model.Message content) {
        super(Service.this, "POST", REST_PATH, content, com.appspot.gcl_11.service.model.Message.class);
      }

      @Override
      public Revoke setAlt(java.lang.String alt) {
        return (Revoke) super.setAlt(alt);
      }

      @Override
      public Revoke setFields(java.lang.String fields) {
        return (Revoke) super.setFields(fields);
      }

      @Override
      public Revoke setKey(java.lang.String key) {
        return (Revoke) super.setKey(key);
      }

      @Override
      public Revoke setOauthToken(java.lang.String oauthToken) {
        return (Revoke) super.setOauthToken(oauthToken);
      }

      @Override
      public Revoke setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Revoke) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Revoke setQuotaUser(java.lang.String quotaUser) {
        return (Revoke) super.setQuotaUser(quotaUser);
      }

      @Override
      public Revoke setUserIp(java.lang.String userIp) {
        return (Revoke) super.setUserIp(userIp);
      }

      @Override
      public Revoke set(String parameterName, Object value) {
        return (Revoke) super.set(parameterName, value);
      }
    }

  }

  /**
   * Create a request for the method "googlepurchases".
   *
   * This request holds the parameters needed by the service server.  After setting any optional
   * parameters, call the {@link Googlepurchases#execute()} method to invoke the remote operation.
   *
   * @param content the {@link com.appspot.gcl_11.service.model.Iab}
   * @return the request
   */
  public Googlepurchases googlepurchases(com.appspot.gcl_11.service.model.Iab content) throws java.io.IOException {
    Googlepurchases result = new Googlepurchases(content);
    initialize(result);
    return result;
  }

  public class Googlepurchases extends ServiceRequest<com.appspot.gcl_11.service.model.InappPurchase> {

    private static final String REST_PATH = "googlepurchases";

    /**
     * Create a request for the method "googlepurchases".
     *
     * This request holds the parameters needed by the the service server.  After setting any optional
     * parameters, call the {@link Googlepurchases#execute()} method to invoke the remote operation.
     * <p> {@link Googlepurchases#initialize(com.google.api.client.googleapis.services.AbstractGoogleC
     * lientRequest)} must be called to initialize this instance immediately after invoking the
     * constructor. </p>
     *
     * @param content the {@link com.appspot.gcl_11.service.model.Iab}
     * @since 1.13
     */
    protected Googlepurchases(com.appspot.gcl_11.service.model.Iab content) {
      super(Service.this, "POST", REST_PATH, content, com.appspot.gcl_11.service.model.InappPurchase.class);
    }

    @Override
    public Googlepurchases setAlt(java.lang.String alt) {
      return (Googlepurchases) super.setAlt(alt);
    }

    @Override
    public Googlepurchases setFields(java.lang.String fields) {
      return (Googlepurchases) super.setFields(fields);
    }

    @Override
    public Googlepurchases setKey(java.lang.String key) {
      return (Googlepurchases) super.setKey(key);
    }

    @Override
    public Googlepurchases setOauthToken(java.lang.String oauthToken) {
      return (Googlepurchases) super.setOauthToken(oauthToken);
    }

    @Override
    public Googlepurchases setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (Googlepurchases) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public Googlepurchases setQuotaUser(java.lang.String quotaUser) {
      return (Googlepurchases) super.setQuotaUser(quotaUser);
    }

    @Override
    public Googlepurchases setUserIp(java.lang.String userIp) {
      return (Googlepurchases) super.setUserIp(userIp);
    }

    @Override
    public Googlepurchases set(String parameterName, Object value) {
      return (Googlepurchases) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "googlestorage".
   *
   * This request holds the parameters needed by the service server.  After setting any optional
   * parameters, call the {@link Googlestorage#execute()} method to invoke the remote operation.
   *
   * @param content the {@link com.appspot.gcl_11.service.model.Iab}
   * @return the request
   */
  public Googlestorage googlestorage(com.appspot.gcl_11.service.model.Iab content) throws java.io.IOException {
    Googlestorage result = new Googlestorage(content);
    initialize(result);
    return result;
  }

  public class Googlestorage extends ServiceRequest<com.appspot.gcl_11.service.model.Message> {

    private static final String REST_PATH = "googlestorage";

    /**
     * Create a request for the method "googlestorage".
     *
     * This request holds the parameters needed by the the service server.  After setting any optional
     * parameters, call the {@link Googlestorage#execute()} method to invoke the remote operation. <p>
     * {@link Googlestorage#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientR
     * equest)} must be called to initialize this instance immediately after invoking the constructor.
     * </p>
     *
     * @param content the {@link com.appspot.gcl_11.service.model.Iab}
     * @since 1.13
     */
    protected Googlestorage(com.appspot.gcl_11.service.model.Iab content) {
      super(Service.this, "POST", REST_PATH, content, com.appspot.gcl_11.service.model.Message.class);
    }

    @Override
    public Googlestorage setAlt(java.lang.String alt) {
      return (Googlestorage) super.setAlt(alt);
    }

    @Override
    public Googlestorage setFields(java.lang.String fields) {
      return (Googlestorage) super.setFields(fields);
    }

    @Override
    public Googlestorage setKey(java.lang.String key) {
      return (Googlestorage) super.setKey(key);
    }

    @Override
    public Googlestorage setOauthToken(java.lang.String oauthToken) {
      return (Googlestorage) super.setOauthToken(oauthToken);
    }

    @Override
    public Googlestorage setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (Googlestorage) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public Googlestorage setQuotaUser(java.lang.String quotaUser) {
      return (Googlestorage) super.setQuotaUser(quotaUser);
    }

    @Override
    public Googlestorage setUserIp(java.lang.String userIp) {
      return (Googlestorage) super.setUserIp(userIp);
    }

    @Override
    public Googlestorage set(String parameterName, Object value) {
      return (Googlestorage) super.set(parameterName, value);
    }
  }

  /**
   * Builder for {@link Service}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          DEFAULT_ROOT_URL,
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
    }

    /** Builds a new instance of {@link Service}. */
    @Override
    public Service build() {
      return new Service(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link ServiceRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setServiceRequestInitializer(
        ServiceRequestInitializer serviceRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(serviceRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }
  }
}
